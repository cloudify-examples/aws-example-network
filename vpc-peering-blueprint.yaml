tosca_definitions_version: cloudify_dsl_1_3

description: >
  Add Support For VPN Connection and VPC Peering

imports:
  - http://www.getcloudify.org/spec/cloudify/4.5/types.yaml
  - plugin:cloudify-aws-plugin

inputs:

  aws_access_key_id:
    description: YOUR AWS ACCESS KEY ID
    default: { get_secret: aws_access_key_id }

  aws_secret_access_key:
    description: YOUR AWS SECRET ACCESS KEY
    default: { get_secret: aws_secret_access_key }

  ec2_region_name:
    default: { get_secret: ec2_region_name }

  ec2_region_endpoint:
    default: { get_secret: ec2_region_endpoint }

  availability_zone:
    default: { get_secret: availability_zone }

  vpc_cidr:
    default: 10.10.0.0/16

  public_subnet_cidr:
    default: 10.10.0.0/24

  private_subnet_cidr:
    default: 10.10.1.0/24

  vpc_cidr_2:
    default: 172.32.0.0/16

  public_subnet_cidr_2:
    default: 172.32.0.0/24

  private_subnet_cidr_2:
    default: 172.32.1.0/24

  customer_gateway_public_ip:
    default: 34.224.150.135

  vpn_connection_type:
    default: 'ipsec.1'

dsl_definitions:

  aws_config: &client_config
    aws_access_key_id: { get_input: aws_access_key_id }
    aws_secret_access_key: { get_input: aws_secret_access_key }
    region_name: { get_input: ec2_region_name }

node_templates:

  vpc:
    type: cloudify.nodes.aws.ec2.Vpc
    properties:
      resource_config:
        kwargs:
          CidrBlock: { get_input: vpc_cidr }
      client_config: *client_config

  internet_gateway:
    type: cloudify.nodes.aws.ec2.InternetGateway
    properties:
      client_config: *client_config
    relationships:
    - type: cloudify.relationships.connected_to
      target: vpc

  public_subnet:
    type: cloudify.nodes.aws.ec2.Subnet
    properties:
      resource_config:
        kwargs:
          CidrBlock: { get_input: public_subnet_cidr }
          AvailabilityZone: { get_input: availability_zone }
      client_config: *client_config
    relationships:
    - type: cloudify.relationships.depends_on
      target: vpc
    - type: cloudify.relationships.depends_on
      target: internet_gateway

  private_subnet:
    type: cloudify.nodes.aws.ec2.Subnet
    properties:
      resource_config:
        kwargs:
          CidrBlock: { get_input: private_subnet_cidr }
          AvailabilityZone: { get_input: availability_zone }
      client_config: *client_config
    relationships:
    - type: cloudify.relationships.depends_on
      target: vpc
    - type: cloudify.relationships.depends_on
      target: internet_gateway

  public_subnet_routetable:
    type: cloudify.nodes.aws.ec2.RouteTable
    properties:
      client_config: *client_config
    relationships:
    - type: cloudify.relationships.contained_in
      target: vpc
    - type: cloudify.relationships.connected_to
      target: public_subnet

  private_subnet_routetable:
    type: cloudify.nodes.aws.ec2.RouteTable
    properties:
      client_config: *client_config
    relationships:
    - type: cloudify.relationships.contained_in
      target: vpc
    - type: cloudify.relationships.connected_to
      target: private_subnet

  route_public_subnet_internet_gateway:
    type: cloudify.nodes.aws.ec2.Route
    properties:
      resource_config:
        kwargs:
          DestinationCidrBlock: '0.0.0.0/0'
      client_config: *client_config
    relationships:
    - type: cloudify.relationships.contained_in
      target: public_subnet_routetable
    - type: cloudify.relationships.connected_to
      target: internet_gateway
    interfaces:
      cloudify.interfaces.lifecycle:
        stop: {}

  nat_gateway_ip:
    type: cloudify.nodes.aws.ec2.ElasticIP
    properties:
      resource_config:
        kwargs:
          Domain: 'vpc'
      client_config: *client_config
    interfaces:
      cloudify.interfaces.lifecycle:
        stop: {}

  nat_gateway:
    type: cloudify.nodes.aws.ec2.NATGateway
    properties:
      client_config: *client_config
    relationships:
    - type: cloudify.relationships.depends_on
      target: public_subnet
    - type: cloudify.relationships.depends_on
      target: nat_gateway_ip

  route_private_subnet_nat_gateway:
    type: cloudify.nodes.aws.ec2.Route
    properties:
      resource_config:
        kwargs:
          DestinationCidrBlock: '0.0.0.0/0'
      client_config: *client_config
    relationships:
    - type: cloudify.relationships.contained_in
      target: private_subnet_routetable
    - type: cloudify.relationships.connected_to
      target: nat_gateway
    interfaces:
      cloudify.interfaces.lifecycle:
        stop: {}

  # Add VPN Gateway to the vpc 1
  vpn_gateway:
    type: cloudify.nodes.aws.ec2.VPNGateway
    properties:
      resource_config:
        kwargs:
          Type: { get_input: vpn_connection_type }
      client_config: *client_config
    relationships:
      - type: cloudify.relationships.connected_to
        target: vpc

  # Add Customer Gateway to the old vpc 1
  customer_gateway:
    type: cloudify.nodes.aws.ec2.CustomerGateway
    properties:
      resource_config:
        kwargs:
          Type: { get_input: vpn_connection_type }
          PublicIp: { get_input: customer_gateway_public_ip }
          BgpAsn: 65000
      client_config: *client_config

  # Add VPN Connection to vpc 1
  vpn_connection:
    type: cloudify.nodes.aws.ec2.VPNConnection
    properties:
      client_config: *client_config
    interfaces:
      cloudify.interfaces.lifecycle:
        create:
          inputs:
            resource_config:
              CustomerGatewayId: { get_attribute: [customer_gateway, aws_resource_id] }
              Type: { get_input: vpn_connection_type }
              VpnGatewayId: { get_attribute: [vpn_gateway, aws_resource_id] }
              Options:
                StaticRoutesOnly: True
    relationships:
      - type: cloudify.relationships.depends_on
        target: vpn_gateway
      - type: cloudify.relationships.depends_on
        target: customer_gateway

  # Add Route to vpc 1 network
  vpn_connection_route:
    type: cloudify.nodes.aws.ec2.VPNConnectionRoute
    properties:
      client_config: *client_config
    interfaces:
      cloudify.interfaces.lifecycle:
        create:
          inputs:
            resource_config:
              VpnConnectionId: { get_attribute: [vpn_connection, aws_resource_id] }
              DestinationCidrBlock: { get_input: vpc_cidr_2 }
    relationships:
      - type: cloudify.relationships.depends_on
        target: vpn_connection

  # Add new vpc network
  vpc_2:
    type: cloudify.nodes.aws.ec2.Vpc
    properties:
      resource_config:
        kwargs:
          CidrBlock: { get_input: vpc_cidr_2 }
      client_config: *client_config

  internet_gateway_2:
    type: cloudify.nodes.aws.ec2.InternetGateway
    properties:
      client_config: *client_config
    relationships:
    - type: cloudify.relationships.connected_to
      target: vpc_2

  public_subnet_2:
    type: cloudify.nodes.aws.ec2.Subnet
    properties:
      resource_config:
        kwargs:
          CidrBlock: { get_input: public_subnet_cidr_2 }
          AvailabilityZone: { get_input: availability_zone }
      client_config: *client_config
    relationships:
    - type: cloudify.relationships.depends_on
      target: vpc_2
    - type: cloudify.relationships.depends_on
      target: internet_gateway_2

  private_subnet_2:
    type: cloudify.nodes.aws.ec2.Subnet
    properties:
      resource_config:
        kwargs:
          CidrBlock: { get_input: private_subnet_cidr_2 }
          AvailabilityZone: { get_input: availability_zone }
      client_config: *client_config
    relationships:
    - type: cloudify.relationships.depends_on
      target: vpc_2
    - type: cloudify.relationships.depends_on
      target: internet_gateway_2

  public_subnet_routetable_2:
    type: cloudify.nodes.aws.ec2.RouteTable
    properties:
      client_config: *client_config
    relationships:
    - type: cloudify.relationships.contained_in
      target: vpc_2
    - type: cloudify.relationships.connected_to
      target: public_subnet_2

  private_subnet_routetable_2:
    type: cloudify.nodes.aws.ec2.RouteTable
    properties:
      client_config: *client_config
    relationships:
    - type: cloudify.relationships.contained_in
      target: vpc_2
    - type: cloudify.relationships.connected_to
      target: private_subnet_2

  route_public_subnet_internet_gateway_2:
    type: cloudify.nodes.aws.ec2.Route
    properties:
      resource_config:
        kwargs:
          DestinationCidrBlock: '0.0.0.0/0'
      client_config: *client_config
    relationships:
    - type: cloudify.relationships.contained_in
      target: public_subnet_routetable_2
    - type: cloudify.relationships.connected_to
      target: internet_gateway_2
    interfaces:
      cloudify.interfaces.lifecycle:
        stop: {}

  nat_gateway_ip_2:
    type: cloudify.nodes.aws.ec2.ElasticIP
    properties:
      resource_config:
        kwargs:
          Domain: 'vpc'
      client_config: *client_config
    interfaces:
      cloudify.interfaces.lifecycle:
        stop: {}

  nat_gateway_2:
    type: cloudify.nodes.aws.ec2.NATGateway
    properties:
      client_config: *client_config
    relationships:
    - type: cloudify.relationships.depends_on
      target: public_subnet_2
    - type: cloudify.relationships.depends_on
      target: nat_gateway_ip_2

  route_private_subnet_nat_gateway_2:
    type: cloudify.nodes.aws.ec2.Route
    properties:
      resource_config:
        kwargs:
          DestinationCidrBlock: '0.0.0.0/0'
      client_config: *client_config
    relationships:
    - type: cloudify.relationships.contained_in
      target: private_subnet_routetable_2
    - type: cloudify.relationships.connected_to
      target: nat_gateway_2
    interfaces:
      cloudify.interfaces.lifecycle:
        stop: {}

  # VPC Peering Between Old network and new network
  vpc_peering:
    type: cloudify.nodes.aws.ec2.VpcPeering
    properties:
      client_config: *client_config
    interfaces:
      cloudify.interfaces.lifecycle:
        create:
          inputs:
            resource_config:
              PeerVpcId: { get_attribute: [vpc, aws_resource_id] }
              VpcId: { get_attribute: [vpc_2, aws_resource_id] }

    relationships:
      - type: cloudify.relationships.depends_on
        target: vpc
      - type: cloudify.relationships.depends_on
        target: vpc_2

  # Approve VPC Peering Request
  vpc_peering_request:
    type: cloudify.nodes.aws.ec2.VpcPeeringAcceptRequest
    properties:
      client_config: *client_config
    interfaces:
      cloudify.interfaces.lifecycle:
        create:
          inputs:
            resource_config:
              VpcPeeringConnectionId: { get_attribute: [vpc_peering, aws_resource_id] }
    relationships:
      - type: cloudify.relationships.depends_on
        target: vpc_peering

outputs:

  vpc_id:
    value: { get_attribute: [ vpc, aws_resource_id ] }

  public_subnet_id:
    value: { get_attribute: [ public_subnet, aws_resource_id ] }

  private_subnet_id:
    value: { get_attribute: [ private_subnet, aws_resource_id ] }

  vpc_2_id:
    value: { get_attribute: [ vpc_2, aws_resource_id ] }

  public_subnet_2_id:
    value: { get_attribute: [ public_subnet_2, aws_resource_id ] }

  private_subnet_2_id:
    value: { get_attribute: [ private_subnet_2, aws_resource_id ] }

  ec2_region_name:
    value: { get_input: ec2_region_name }

  ec2_region_endpoint:
    value: { get_input: ec2_region_endpoint }

  availability_zone:
    value: { get_input: availability_zone }
