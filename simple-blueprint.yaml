tosca_definitions_version: cloudify_dsl_1_3

description: >
  Create an AWS VPC based on the Scenario 2 design.

imports:
  - http://www.getcloudify.org/spec/cloudify/4.2/types.yaml
  - http://www.getcloudify.org/spec/awssdk-plugin/1.2.0.1/plugin.yaml

inputs:

  aws_access_key_id:
    description: YOUR AWS ACCESS KEY ID
    default: { get_secret: aws_access_key_id }

  aws_secret_access_key:
    description: YOUR AWS SECRET ACCESS KEY
    default: { get_secret: aws_secret_access_key }

  ec2_region_name:
    default: { get_secret: ec2_region_name }

  ec2_region_endpoint:
    default: { get_secret: ec2_region_endpoint }

  availability_zone:
    default: { get_secret: availability_zone }

  vpc_cidr:
    default: 10.10.0.0/16

  public_subnet_cidr:
    default: 10.10.0.0/24

  private_subnet_cidr:
    default: 10.10.1.0/24

dsl_definitions:

  aws_config: &client_config
    aws_access_key_id: { get_input: aws_access_key_id }
    aws_secret_access_key: { get_input: aws_secret_access_key }
    region_name: { get_input: ec2_region_name }

node_templates:

  vpc:
    type: cloudify.nodes.aws.ec2.Vpc
    properties:
      resource_config:
        kwargs:
          CidrBlock: { get_input: vpc_cidr }
      client_config: *client_config

  internet_gateway:
    type: cloudify.nodes.aws.ec2.InternetGateway
    properties:
      client_config: *client_config
    relationships:
    - type: cloudify.relationships.connected_to
      target: vpc

  public_subnet:
    type: cloudify.nodes.aws.ec2.Subnet
    properties:
      resource_config:
        kwargs:
          CidrBlock: { get_input: public_subnet_cidr }
          AvailabilityZone: { get_input: availability_zone }
      client_config: *client_config
    relationships:
    - type: cloudify.relationships.depends_on
      target: vpc
    - type: cloudify.relationships.depends_on
      target: internet_gateway

  private_subnet:
    type: cloudify.nodes.aws.ec2.Subnet
    properties:
      resource_config:
        kwargs:
          CidrBlock: { get_input: private_subnet_cidr }
          AvailabilityZone: { get_input: availability_zone }
      client_config: *client_config
    relationships:
    - type: cloudify.relationships.depends_on
      target: vpc
    - type: cloudify.relationships.depends_on
      target: internet_gateway

  nat_gateway_ip:
    type: cloudify.nodes.aws.ec2.ElasticIP
    properties:
      resource_config:
        kwargs:
          Domain: 'vpc'
      client_config: *client_config
    interfaces:
      cloudify.interfaces.lifecycle:
        stop: {}

  nat_gateway:
    type: cloudify.nodes.aws.ec2.NATGateway
    properties:
      client_config: *client_config
    relationships:
    - type: cloudify.relationships.depends_on
      target: public_subnet
    - type: cloudify.relationships.depends_on
      target: nat_gateway_ip

  public_subnet_routetable:
    type: cloudify.nodes.aws.ec2.RouteTable
    properties:
      client_config: *client_config
    relationships:
    - type: cloudify.relationships.contained_in
      target: vpc
    - type: cloudify.relationships.connected_to
      target: public_subnet

  private_subnet_routetable:
    type: cloudify.nodes.aws.ec2.RouteTable
    properties:
      client_config: *client_config
    relationships:
    - type: cloudify.relationships.contained_in
      target: vpc
    - type: cloudify.relationships.connected_to
      target: private_subnet

  route_public_subnet_internet_gateway:
    type: cloudify.nodes.aws.ec2.Route
    properties:
      resource_config:
        kwargs:
          DestinationCidrBlock: '0.0.0.0/0'
      client_config: *client_config
    relationships:
    - type: cloudify.relationships.contained_in
      target: public_subnet_routetable
    - type: cloudify.relationships.connected_to
      target: internet_gateway
    interfaces:
      cloudify.interfaces.lifecycle:
        stop: {}

  route_private_subnet_nat_gateway:
    type: cloudify.nodes.aws.ec2.Route
    properties:
      resource_config:
        kwargs:
          DestinationCidrBlock: '0.0.0.0/0'
      client_config: *client_config
    relationships:
    - type: cloudify.relationships.contained_in
      target: private_subnet_routetable
    - type: cloudify.relationships.connected_to
      target: nat_gateway
    interfaces:
      cloudify.interfaces.lifecycle:
        stop: {}

outputs:

  vpc_id:
    # Execute cfy deployments outputs
    # Create a secret with the VALUE for vpc_id
    # cfy secrets create vpc_id -s VALUE 
    value: { get_attribute: [ vpc, aws_resource_id ] }

  public_subnet_id:
    # Execute cfy deployments outputs
    # Create a secret with the VALUE for public_subnet_id
    # cfy secrets create public_subnet_id -s VALUE 
    value: { get_attribute: [ public_subnet, aws_resource_id ] }

  private_subnet_id:
    # Execute cfy deployments outputs
    # Create a secret with the VALUE for private_subnet
    # cfy secrets create private_subnet -s VALUE 
    value: { get_attribute: [ private_subnet, aws_resource_id ] }

  ec2_region_name:
    # Execute cfy deployments outputs
    # Create a secret with the VALUE for ec2_region_name
    # cfy secrets create ec2_region_name -s VALUE 
    value: { get_input: ec2_region_name }

  ec2_region_endpoint:
    # Execute cfy deployments outputs
    # Create a secret with the VALUE for ec2_region_endpoint
    # cfy secrets create ec2_region_endpoint -s VALUE 
    value: { get_input: ec2_region_endpoint }

  availability_zone:
    # Execute cfy deployments outputs
    # Create a secret with the VALUE for availability_zone
    # cfy secrets create availability_zone -s VALUE 
    value: { get_input: availability_zone }
